// Generated by CoffeeScript 1.7.1
(function() {
  var Box, Boxes, User, el, layer, rect, stage, user,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Box = (function(_super) {
    __extends(Box, _super);

    function Box() {
      return Box.__super__.constructor.apply(this, arguments);
    }

    Box.prototype.initialize = function() {
      this.on('change:price change:quantity', this.setSubtotal);
      return this.on('change:item', this.setPrice);
    };

    Box.prototype.defaults = {
      x_position: 0,
      y_position: 0,
      rotate: 0
    };

    Box.prototype.setXPosition = function() {};

    Box.prototype.setYPosition = function() {};

    Box.prototype.setRotate = function() {};

    Box.prototype["delete"] = function() {};

    return Box;

  })(Backbone.Model);

  Boxes = (function(_super) {
    __extends(Boxes, _super);

    function Boxes() {
      return Boxes.__super__.constructor.apply(this, arguments);
    }

    Boxes.prototype.model = Box;

    Boxes.prototype.initialize = function() {
      return this.newBoxId = 10;
    };

    Boxes.prototype.addNewBox = function() {
      return console.log('add new');
    };

    return Boxes;

  })(Backbone.Collection);

  this.boxes = new Boxes;

  rivets.bind($('.boxes'), {
    boxes: this.boxes
  });

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.defaults = {
      name: "Joe"
    };

    User.prototype.add_u = function() {
      return console.log('d');
    };

    return User;

  })(Backbone.Model);

  el = document.getElementById("user-view");

  rivets.bind(el, {
    user: user = new User
  });

  stage = new Kinetic.Stage({
    container: "canvas_container",
    width: 300,
    height: 360
  });

  layer = new Kinetic.Layer();

  rect = new Kinetic.Rect({
    x: 10,
    y: 10,
    width: 20,
    height: 20,
    fill: "green",
    strokeWidth: 4
  });

  layer.add(rect);

  stage.add(layer);

}).call(this);
